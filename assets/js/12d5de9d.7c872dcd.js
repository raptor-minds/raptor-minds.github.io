(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[534],{261:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return h},default:function(){return m}});var r=a(2122),n=a(9756),s=(a(7294),a(3905)),o=["components"],i={},l={unversionedId:"distributed-system/message",id:"distributed-system/message",isDocsHomePage:!1,title:"Message Middleware",description:"Distributed system design need to take the following key points into consideration:",source:"@site/docs/distributed-system/message.md",sourceDirName:"distributed-system",slug:"/distributed-system/message",permalink:"/docs/distributed-system/message",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/distributed-system/message.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"introduction",permalink:"/docs/intro"}},h=[{value:"Kafka",id:"kafka",children:[{value:"Installation",id:"installation",children:[]},{value:"Produce and persistence message",id:"produce-and-persistence-message",children:[]},{value:"Consume message",id:"consume-message",children:[]}]},{value:"RocketMQ",id:"rocketmq",children:[{value:"Installation",id:"installation-1",children:[]},{value:"Transaction",id:"transaction",children:[]},{value:"Source code",id:"source-code",children:[]}]}],u={toc:h};function m(e){var t=e.components,i=(0,n.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Distributed system design need to take the following key points into consideration:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Reliability"),(0,s.kt)("li",{parentName:"ol"},"Scability"),(0,s.kt)("li",{parentName:"ol"},"High performance"),(0,s.kt)("li",{parentName:"ol"},"CAP (Consistency, Availablity, Partition tolerance) property",(0,s.kt)("ol",{parentName:"li"},(0,s.kt)("li",{parentName:"ol"},"The system continues to operate despite arbitrary message loss or failure of part of the system.")))),(0,s.kt)("h2",{id:"kafka"},"Kafka"),(0,s.kt)("p",null,"When you want to design a new distributed system, the first image in your mind should be the ",(0,s.kt)("strong",{parentName:"p"},"AKF classic model"),". Generally, there are three dimensions, named X,Y and Z. "),(0,s.kt)("p",null,"The following questions we need to solve:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"For the X axis, if we want to extend to add more machine, how to make minimum impact to the existed cluster? ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"the broker? add more?"),(0,s.kt)("li",{parentName:"ul"},"for the same partition, how to scale? if the storage is not enough."))),(0,s.kt)("li",{parentName:"ul"},"For the Y axis, if we want to enrich our business , which means to analyze or produce more data.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"to add more partition?"))),(0,s.kt)("li",{parentName:"ul"},"For the Z axis, if we want to enlarge our cluster, we want to extend our business to the whole world, say, China, Japan, America, if we add more cluster , how can keep the CAP property."),(0,s.kt)("li",{parentName:"ul"},"How does Kafka handle the reliability problem?",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"for the broker, use HA",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"backup machine, if one crash, the others can still continue work well."),(0,s.kt)("li",{parentName:"ul"},"for the master slave work model, how to handle the election problem when the master crash"))),(0,s.kt)("li",{parentName:"ul"},"for the message producer:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"we should ",(0,s.kt)("strong",{parentName:"li"},"confirm")," each message has alreay stored in the broker, or in the partition"))),(0,s.kt)("li",{parentName:"ul"},"for the message consumer:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"we should report the the broker, where we already consumed."),(0,s.kt)("li",{parentName:"ul"},"if during the period, the broker crash, which broker else should we choose."),(0,s.kt)("li",{parentName:"ul"},"if the consumers are far less slower the producers, we should add more consumer.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Which partition should the new consumer handle"),(0,s.kt)("li",{parentName:"ul"}))))))),(0,s.kt)("li",{parentName:"ul"},"How does Kafka handle the scability?",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"use topic and partition"))),(0,s.kt)("li",{parentName:"ul"},"how does Kafka hanle high performance?",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"use the big memory, and the LRU algorithm to swap the space in the disk"),(0,s.kt)("li",{parentName:"ul"},"keep the hot message for one period of time in the memory, the consumer can fetch or query in a high speed.")))),(0,s.kt)("h3",{id:"installation"},"Installation"),(0,s.kt)("h3",{id:"produce-and-persistence-message"},"Produce and persistence message"),(0,s.kt)("p",null,"when message produced, how the broker tell the producer that message already received, say ",(0,s.kt)("strong",{parentName:"p"},"ACK"),"? how the broker store the message and persistence it. To make sure high throughput under the high concurrency, if each need one ACK, is it efficienient? "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"It should be backed up, which means even the master, for the kafka it is called controller, crashed, when ACK reply to the producer, the message could be use."),(0,s.kt)("li",{parentName:"ul"},"it should be efficient, when multiple producers connect the single broker, it can reply ACK as quickly as possible.")),(0,s.kt)("p",null,"Here comes the question:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"when to reply the ACK message to the producer, as soon as the message received, or the message has been stored to the disk to the signle node, or the message alreay been backed up to the slave node?"),(0,s.kt)("li",{parentName:"ul"},"how to reply to the producer, reactive mode, sync mode, or async mode?"),(0,s.kt)("li",{parentName:"ul"},"Besides storing the message to the disk, we also need to maintain the index for the message stored on the disk, because each message's length is not the same, we can not use the array to hold the data, we need the list data structure to hold the data, so we need to introduce the index. the consumer can query the message by topic or by time, even in the sql model.")),(0,s.kt)("p",null,"The Kafka also maintains the index for the messages and the timestamp index for the index, which can be viewed in the picture above. "),(0,s.kt)("p",null,"Assuming that, every message should be persistenced in the disk, and each message should be consumed, does the broker need to fetch every message from the disk and send it back to the consumer?"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u200b\tthe answer is no, we can use ",(0,s.kt)("strong",{parentName:"li"},"zero copy"),", use ",(0,s.kt)("inlineCode",{parentName:"li"},"sendfile(in,offset,out)")," to do that.")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Kafka_message_producing",src:a(9202).Z})),(0,s.kt)("p",null,"There're three kinds of ACKs in Kafka,  namly ",(0,s.kt)("inlineCode",{parentName:"p"},"0, 1, -1")," respectivly. "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"0")," stands for the ack when the message received by the broker and stored in the ",(0,s.kt)("strong",{parentName:"li"},"pagecache"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"1")," stands for the ack when the message stored on the ",(0,s.kt)("strong",{parentName:"li"},"disk")," by the broker."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"-1")," stands for the ack when the message stored in the distributed system by the broker.")),(0,s.kt)("p",null,"For the ",(0,s.kt)("inlineCode",{parentName:"p"},"-1"),",  there comes another problem, what kind of depth should the distributed system align with each other?"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Half of them voted, every message should wait for half of the nodes in the cluster, would it be so long?"),(0,s.kt)("li",{parentName:"ul"},"Another question, without the others slaves node backup, can these message be consumed?",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"the answer is no, here we introduce another concept.")))),(0,s.kt)("p",null,"Distribute system consistency for message backup. When should the ",(0,s.kt)("strong",{parentName:"p"},"High watermark")," move forward?"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Half of them backup? The traditional distribute system solution."),(0,s.kt)("li",{parentName:"ul"},"One backup is enough?"),(0,s.kt)("li",{parentName:"ul"},"When should the backup broker do this action? ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"the producer produce the message, and the ACK is ",(0,s.kt)("inlineCode",{parentName:"li"},"-1"),", the producer will wait for the rest broker to finish syncing. which is called ",(0,s.kt)("strong",{parentName:"li"},"Strong consistency")),(0,s.kt)("li",{parentName:"ul"},"the producer only send to the master, the follower fetch the new data from the master, ",(0,s.kt)("strong",{parentName:"li"},"Final consistency"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"ISR (In sync replication)")," still keep heart beat message with each other, or with the zookeeper ?"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"OSR (out of sync replication)"),", lose the heart beat "),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"AR (Asigned replication)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"AR = ISR + OSR"))))),(0,s.kt)("p",null,"The consumer only can consume the message between Low and High watermarker."),(0,s.kt)("p",null,(0,s.kt)("img",{src:a(1781).Z})),(0,s.kt)("p",null,"There is ",(0,s.kt)("strong",{parentName:"p"},"no Read/Write splitting")," in Kafka."),(0,s.kt)("h3",{id:"consume-message"},"Consume message"),(0,s.kt)("h2",{id:"rocketmq"},"RocketMQ"),(0,s.kt)("h3",{id:"installation-1"},"Installation"),(0,s.kt)("h4",{id:"compile"},"Compile"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mvn -Prelease-all -DskipTests clean install -U\n")),(0,s.kt)("h4",{id:"start-nameserver"},"Start nameserver"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"nohup ./mqnamesrv &\n")),(0,s.kt)("h4",{id:"start-broker"},"Start broker"),(0,s.kt)("h5",{id:"config-broker-conf"},"Config broker conf"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"brokerIP1=112.126.66.246\nnamesrvAddr=112.126.66.246:9876\nautoCreateTopicEnable=true\nenablePropertyFilter=true\n")),(0,s.kt)("h5",{id:"start-broker-1"},"start broker"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"./mqbroker -n localhost:9876 -c broker.conf\n")),(0,s.kt)("h4",{id:"start-console"},"Start console"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"https://github.com/apache/rocketmq-externals\njava -jar rocketmq-console-ng-2.0.0.jar --rocketmq.config.namesrvAddr=127.0.0.1:9876 \n")),(0,s.kt)("h3",{id:"transaction"},"Transaction"),(0,s.kt)("p",null,(0,s.kt)("img",{src:a(6842).Z})),(0,s.kt)("p",null,"The processing flow of RocketMQ in the distributed system can be generally descriped as followes\uff1a"),(0,s.kt)("h4",{id:"two-phase-tx-commit"},"Two phase tx commit"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Producer need to invoke A,B,C,D method in one Tx, the broker of rocket message queue will store these four message in one ",(0,s.kt)("strong",{parentName:"p"},"Half Queue"),".")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"The broker will start one thread to schedully call back the execution status of A, B,C, D. When the status is OK, then the broker will put the A,B,C,D message in the ",(0,s.kt)("strong",{parentName:"p"},"Final Queue"),"."))),(0,s.kt)("h3",{id:"source-code"},"Source code"),(0,s.kt)("h4",{id:"consumer"},"Consumer"),(0,s.kt)("p",null,"The questions are as follows:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The speed of the consuming is much lower than the broker, if we use push model."),(0,s.kt)("li",{parentName:"ul"},"how to query or acquire the events or message from the broker?"),(0,s.kt)("li",{parentName:"ul"},"During the processing of the consuming message, what if the legency message already timeout, how to handle this?"),(0,s.kt)("li",{parentName:"ul"},"for the broker clusters, which ip or machine should I choose to pull message?")),(0,s.kt)("h4",{id:"producer"},"Producer"),(0,s.kt)("h4",{id:"broker"},"Broker"))}m.isMDXComponent=!0},9202:function(e,t,a){"use strict";t.Z=a.p+"assets/images/Kafka_message_producing-3594004-4b64d3b347cea50ebde562137c55ae15.png"},6842:function(e,t,a){"use strict";t.Z=a.p+"assets/images/RocketMQ_Transaction-e7e3e4be3891e20e75c15e6265c57b38.png"},1781:function(e,t,a){"use strict";t.Z=a.p+"assets/images/kafka_cluster_sync-64628cf2f6fd64dabd3567aaa70a0e17.png"}}]);